type AllCellCulturePairs {
	results: [CellCulturePair!]!
	total: Int!
}

type AllEntires {
	results: [Entry!]!
	total: Int!
}

type Article {
	id: Int!
	name: String!
	description: String
	createdAt: DateTime!
	dGroup: Int!
}

input ArticleFetchOptions {
	id: Int
	pageSize: Int
	page: Int
	ordering: ArticleOrderingOptions
	filters: [ArticleFilterOptions!]
	dGroup: Int!
}

enum ArticleFields {
	ID
	NAME
	DESCRIPTION
}

input ArticleFilterOptions {
	field: ArticleFields!
	value: String!
}

input ArticleInsertOptions {
	name: String!
	description: String
	dGroup: Int!
}

input ArticleOrderingOptions {
	order: Ordering!
	orderBy: ArticleFields!
}

type ArticleResults {
	results: [Article!]!
	page: Int!
	pageSize: Int!
	totalItems: Int!
	totalPages: Int!
}

input ArticleUpdateOptions {
	id: Int!
	name: String
	description: String
}


type Buyer {
	id: Int!
	name: String
	address: String
	contact: String
	createdAt: DateTime!
	dGroup: Int!
}

input BuyerFetchOptions {
	id: Int
	pageSize: Int
	page: Int
	ordering: BuyerOrderingOptions
	filters: [BuyerFilterOptions!]
	dGroup: Int!
}

enum BuyerFields {
	ID
	NAME
	ADDRESS
	CONTACT
}

input BuyerFilterOptions {
	field: BuyerFields!
	value: String!
}

input BuyerInsertOptions {
	name: String!
	address: String
	contact: String
	dGroup: Int!
}

input BuyerOrderingOptions {
	order: Ordering!
	orderBy: BuyerFields!
}

type BuyerResult {
	results: [Buyer!]!
	page: Int!
	pageSize: Int!
	totalItems: Int!
	totalPages: Int!
}

input BuyerUpdateOptions {
	id: Int!
	name: String
	address: String
	contact: String
}

type Cell {
	id: Int!
	name: String!
	description: String
	createdAt: DateTime!
	dGroup: Int!
}

input CellCultureFetchOptions {
	id: CellCulturePairIds
	pageSize: Int
	page: Int
	ordering: CellCultureOrderingOptions
	filters: [CellCultureFilterOptions!]
	dGroup: Int!
}

input CellCultureFilterOptions {
	field: CellCulturePairFields!
	value: String!
}

input CellCultureOrderingOptions {
	order: Ordering!
	orderBy: CellCulturePairFields!
}

type CellCulturePair {
	id: Int!
	cell: Cell!
	culture: Culture!
	createdAt: DateTime!
	dGroup: DataGroup!
}

enum CellCulturePairFields {
	CELL_NAME
	CELL_DESCRIPTION
	CULTURE_NAME
	CULTURE_DESCRIPTION
}

input CellCulturePairIds {
	idCell: Int!
	idCulture: Int!
	dGroup: Int!
}

type CellCulturePairResult {
	results: [CellCulturePair!]!
	page: Int!
	pageSize: Int!
	totalItems: Int!
	totalPages: Int!
}

input CellCulturePairUpdateOptions {
	id: Int!
	idCell: Int
	idCulture: Int
}

input CellFetchOptions {
	id: Int
	pageSize: Int
	page: Int
	ordering: CellOrderingOptions
	filters: [CellFilterOptions!]
	dGroup: Int!
}

enum CellFields {
	ID
	NAME
	DESCRIPTION
}

input CellFilterOptions {
	field: CellFields!
	value: String!
}

input CellInsertOptions {
	name: String!
	description: String
	dGroup: Int!
}

input CellOrderingOptions {
	order: Ordering!
	orderBy: CellFields!
}

input CellParity {
	"""
	Id refers to a Culture Id
	"""
	idCulture: Int
}

input CellParityFetchOptions {
	id: CellParity!
	pageSize: Int
	page: Int
	ordering: CellOrderingOptions
	filters: [CellFilterOptions!]
	dGroup: Int!
}

type CellResult {
	results: [Cell!]!
	page: Int!
	pageSize: Int!
	totalItems: Int!
	totalPages: Int!
}

input CellUpdateOptions {
	id: Int!
	name: String
	description: String
}

enum Comparator {
	EQ
	NE
	GT
	GTE
	LT
	LTE
}

type Culture {
	id: Int!
	name: String!
	description: String
	createdAt: DateTime!
	dGroup: Int!
}

input CultureFetchOptions {
	id: Int
	pageSize: Int
	page: Int
	ordering: CultureOrderingOptions
	filters: [CultureFilterOptions!]
	dGroup: Int!
}

enum CultureFields {
	ID
	NAME
	DESCRIPTION
}

input CultureFilterOptions {
	field: CultureFields!
	value: String!
}

input CultureInsertOptions {
	name: String!
	description: String
	dGroup: Int!
}

input CultureOrderingOptions {
	order: Ordering!
	orderBy: CultureFields!
}

input CultureParity {
	"""
	Id refers to a Cell Id
	"""
	idCell: Int
}

input CultureParityFetchOptions {
	id: CultureParity!
	pageSize: Int
	page: Int
	ordering: CultureOrderingOptions
	filters: [CultureFilterOptions!]
	dGroup: Int!
}

type CultureResult {
	results: [Culture!]!
	page: Int!
	pageSize: Int!
	totalItems: Int!
	totalPages: Int!
}

input CultureUpdateOptions {
	id: Int!
	name: String
	description: String
}

type DataGroup {
	id: Int!
	name: String!
	description: String
	createdAt: DateTime!
	idMbeGroup: Int!
}

input DataGroupInsertOptions {
	idMbeGroup: Int!
	name: String!
	description: String
}

input DataGroupUpdateOptions {
	id: Int!
	name: String
	description: String
}

"""
Implement the DateTime<FixedOffset> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

input DeleteOptions {
	id: Int!
}

type DispatchNote {
	id: Int!
	noteType: Int
	numericalIdentifier: Int
	issuingDate: NaiveDate
	createdAt: DateTime!
	dGroup: Int!
}

type DispatchNoteArticle {
	id: Int!
	dispatchNote: DispatchNote!
	article: Article!
	weightType: String
	quantity: Float!
	createdAt: DateTime!
	dGroup: DataGroup!
}

input DispatchNoteArticleFetchOptions {
	id: DispatchNoteArticleIds
	pageSize: Int
	page: Int
	ordering: DispatchNoteArticleOrderingOptions
	filters: [DispatchNoteArticleFilterOptions!]
	dGroup: Int!
}

enum DispatchNoteArticleFields {
	ARTICLE_NAME
	ARTICLE_DESCRIPTION
	WEIGHT_TYPE
	QUANTITY
}

input DispatchNoteArticleFilterOptions {
	field: DispatchNoteArticleFields!
	value: String!
}

input DispatchNoteArticleIds {
	idDispatchNote: Int
	idArticle: Int
}

input DispatchNoteArticleInsertOptions {
	idDispatchNote: Int!
	idArticle: Int!
	weightType: String
	quantity: Float!
	dGroup: Int!
}

input DispatchNoteArticleOrderingOptions {
	order: Ordering!
	orderBy: DispatchNoteArticleFields!
}

type DispatchNoteArticleResults {
	results: [DispatchNoteArticle!]!
	page: Int!
	pageSize: Int!
	totalItems: Int!
	totalPages: Int!
}

input DispatchNoteArticleUpdateOptions {
	id: Int!
	idDispatchNote: Int
	idArticle: Int
	weightType: String
	quantity: Float
}

input DispatchNoteFetchOptions {
	id: Int
	pageSize: Int
	page: Int
	ordering: DispatchNoteOrderingOptions
	filters: [DispatchNoteFilterOptions!]
	dGroup: Int!
}

enum DispatchNoteFields {
	ID
	NOTE_TYPE
	NUMERICAL_IDENTIFIER
	ISSUING_DATE
}

input DispatchNoteFilterOptions {
	field: DispatchNoteFields!
	value: DispatchNoteFilterValue!
}

input DispatchNoteFilterValue {
	"""
	Number, date or date range as string
	Date range is expected to be in format Date, Date
	"""
	value: String!
	comparator: Comparator
}

input DispatchNoteInsertOptions {
	noteType: Int
	numericalIdentifier: Int
	issuingDate: DateTime
	dGroup: Int!
}

input DispatchNoteOrderingOptions {
	order: Ordering!
	orderBy: DispatchNoteFields!
}

type DispatchNoteResults {
	results: [DispatchNote!]!
	page: Int!
	pageSize: Int!
	totalItems: Int!
	totalPages: Int!
}

input DispatchNoteUpdateOptions {
	id: Int!
	noteType: Int
	numericalIdentifier: Int
	issuingDate: DateTime
}

type Entry {
	id: Int!
	weight: Float
	weightType: String
	date: NaiveDate!
	createdAt: DateTime!
	buyer: Buyer
	cell: Cell!
	culture: Culture!
	dGroup: DataGroup
}

input EntryFetchOptions {
	id: Int
	pageSize: Int
	page: Int
	ordering: EntryOrderingOptions
	filters: [EntryFilterOptions!]
	dGroup: Int!
}

enum EntryFields {
	ID
	WEIGHT
	DATE
	BUYER_NAME
	BUYER_ADDRESS
	BUYER_CONTACT
	CELL_NAME
	CELL_DESCRIPTION
	CULTURE_NAME
	CULTURE_DESCRIPTION
}

input EntryFilterOptions {
	field: EntryFields!
	value: String!
}

input EntryInsertOptions {
	date: DateTime!
	weight: Float
	weightType: String
	idBuyer: Int!
	idCell: Int!
	idCulture: Int!
	dGroup: Int!
}

input EntryOrderingOptions {
	order: Ordering!
	orderBy: EntryFields!
}

type EntryResult {
	results: [Entry!]!
	page: Int!
	pageSize: Int!
	totalItems: Int!
	totalPages: Int!
}

input EntryUpdateOptions {
	id: Int!
	weight: Float
	weightType: String
	date: DateTime
	idBuyer: Int
	pairIds: PairIds
	dGroup: Int
}




type MbeGroup {
	id: Int!
	name: String!
	owner: Int!
	createdAt: DateTime!
}

input MbeGroupInsertOptions {
	name: String!
}

type MbeGroupMembers {
	idMbeUser: Int!
	idMbeGroup: Int!
}

type MbeGroupMembersFlattened {
	idUser: Int!
	email: String!
	idGroup: Int!
	groupName: String!
}

input MbeGroupMembersOptions {
	idMbeGroup: Int!
	memberEmail: String!
}

input MbeGroupMembersQueryOptions {
	idMbeGroup: Int!
}

type MutationRoot {
	insertBuyer(options: BuyerInsertOptions!): Buyer!
	updateBuyer(options: BuyerUpdateOptions!): Buyer!
	deleteBuyer(options: DeleteOptions!): RowsDeleted!
	insertCell(options: CellInsertOptions!): Cell!
	updateCell(options: CellUpdateOptions!): Cell!
	deleteCell(options: DeleteOptions!): RowsDeleted!
	insertCulture(options: CultureInsertOptions!): Culture!
	updateCulture(options: CultureUpdateOptions!): Culture!
	deleteCulture(options: DeleteOptions!): RowsDeleted!
	insertDataGroup(options: DataGroupInsertOptions!): DataGroup!
	updateDataGroup(options: DataGroupUpdateOptions!): DataGroup!
	deleteDataGroup(options: DeleteOptions!): RowsDeleted!
	insertCellCulturePair(options: CellCulturePairIds!): CellCulturePair!
	updateCellCulturePair(options: CellCulturePairUpdateOptions!): CellCulturePair!
	deleteCellCulturePair(options: DeleteOptions!): RowsDeleted!
	insertEntry(options: EntryInsertOptions!): Entry!
	updateEntry(options: EntryUpdateOptions!): Entry!
	deleteEntry(options: DeleteOptions!): RowsDeleted!
	insertArticle(options: ArticleInsertOptions!): Article!
	updateArticle(options: ArticleUpdateOptions!): Article!
	deleteArticle(options: DeleteOptions!): RowsDeleted!
	insertDispatchNote(options: DispatchNoteInsertOptions!): DispatchNote!
	updateDispatchNote(options: DispatchNoteUpdateOptions!): DispatchNote!
	deleteDispatchNote(options: DeleteOptions!): RowsDeleted!
	insertDispatchNoteArticle(options: DispatchNoteArticleInsertOptions!): DispatchNoteArticle!
	updateDispatchNoteArticle(options: DispatchNoteArticleUpdateOptions!): DispatchNoteArticle!
	deleteDispatchNoteArticle(options: DeleteOptions!): RowsDeleted!
	insertMbeGroup(options: MbeGroupInsertOptions!): MbeGroup!
	insertGroupMember(options: MbeGroupMembersOptions!): MbeGroupMembers!
	removeGroupMember(options: MbeGroupMembersOptions!): RowsDeleted!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate

enum Ordering {
	ASC
	DESC
}

input PairIds {
	idCell: Int!
	idCulture: Int!
}

type QueryRoot {
	buyers(options: BuyerFetchOptions!): BuyerResult!
	cells(options: CellFetchOptions!): CellResult!
	pairedCells(options: CellParityFetchOptions!): CellResult!
	unpairedCells(options: CellParityFetchOptions!): CellResult!
	cultures(options: CultureFetchOptions!): CultureResult!
	pairedCultures(options: CultureParityFetchOptions!): CultureResult!
	unpairedCultures(options: CultureParityFetchOptions!): CultureResult!
	dataGroups: [DataGroup!]!
	cellCulturePairs(options: CellCultureFetchOptions!): CellCulturePairResult!
	allCellCulturePairs(options: CellCultureFetchOptions!): AllCellCulturePairs!
	entries(options: EntryFetchOptions!): EntryResult!
	allEntries(options: EntryFetchOptions!): AllEntires!
	articles(options: ArticleFetchOptions!): ArticleResults!
	dispatchNotes(options: DispatchNoteFetchOptions!): DispatchNoteResults!
	dispatchNoteArticles(options: DispatchNoteArticleFetchOptions!): DispatchNoteArticleResults!
	mbeGroups: [MbeGroup!]!
	mbeGroupMembers(options: MbeGroupMembersQueryOptions!): [MbeGroupMembersFlattened!]!
}

type RowsDeleted {
	numRows: Int!
}


schema {
	query: QueryRoot
	mutation: MutationRoot
}
