//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "entry")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub weight: Option<f64>,
    pub weight_type: Option<String>,
    pub date: DateTimeWithTimeZone,
    pub created_at: DateTimeWithTimeZone,
    pub id_buyer: Option<i32>,
    pub id_cell: i32,
    pub id_culture: i32,
    pub d_group: Option<i32>,
    pub ccp_d_group: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::buyer::Entity",
        from = "Column::IdBuyer",
        to = "super::buyer::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Buyer,
    #[sea_orm(
        belongs_to = "super::cell_culture_pair::Entity",
        from = "Column::IdCell",
        to = "super::cell_culture_pair::Column::IdCulture",
        on_update = "Cascade",
        on_delete = "NoAction"
    )]
    CellCulturePair,
    #[sea_orm(
        belongs_to = "super::data_group::Entity",
        from = "Column::DGroup",
        to = "super::data_group::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    DataGroup,
    #[sea_orm(
        belongs_to = "super::weight_types::Entity",
        from = "Column::WeightType",
        to = "super::weight_types::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WeightTypes,
}

impl Related<super::buyer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Buyer.def()
    }
}

impl Related<super::cell_culture_pair::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CellCulturePair.def()
    }
}

impl Related<super::data_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DataGroup.def()
    }
}

impl Related<super::weight_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WeightTypes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
