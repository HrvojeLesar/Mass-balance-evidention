//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "cell_culture_pair")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id_cell: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id_culture: i32,
    pub created_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key, auto_increment = false)]
    pub d_group: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cell::Entity",
        from = "Column::IdCell",
        to = "super::cell::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Cell,
    #[sea_orm(
        belongs_to = "super::culture::Entity",
        from = "Column::IdCulture",
        to = "super::culture::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Culture,
    #[sea_orm(
        belongs_to = "super::data_group::Entity",
        from = "Column::DGroup",
        to = "super::data_group::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    DataGroup,
    #[sea_orm(has_many = "super::entry::Entity")]
    Entry,
}

impl Related<super::cell::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cell.def()
    }
}

impl Related<super::culture::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Culture.def()
    }
}

impl Related<super::data_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DataGroup.def()
    }
}

impl Related<super::entry::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Entry.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
